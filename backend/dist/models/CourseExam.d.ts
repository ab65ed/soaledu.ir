declare const Parse: any;
/**
 * CourseExam Schema for Back4App
 * Represents a course exam entity with comprehensive metadata
 */
declare class CourseExam extends Parse.Object {
    constructor();
    get title(): any;
    get courseType(): any;
    get grade(): any;
    get group(): any;
    get description(): any;
    get tags(): any;
    get isPublished(): any;
    get isDraft(): any;
    get questionCount(): any;
    get totalSales(): any;
    get revenue(): any;
    get difficulty(): any;
    get estimatedTime(): any;
    get price(): any;
    get authorId(): any;
    get author(): any;
    get metadata(): any;
    get averageRating(): any;
    get ratingCount(): any;
    get lastAutoSave(): any;
    get version(): any;
    get chapters(): any;
    set title(value: any);
    set courseType(value: any);
    set grade(value: any);
    set group(value: any);
    set description(value: any);
    set tags(value: any);
    set isPublished(value: any);
    set isDraft(value: any);
    set questionCount(value: any);
    set totalSales(value: any);
    set revenue(value: any);
    set difficulty(value: any);
    set estimatedTime(value: any);
    set price(value: any);
    set authorId(value: any);
    set author(value: any);
    set metadata(value: any);
    set averageRating(value: any);
    set ratingCount(value: any);
    set lastAutoSave(value: any);
    set version(value: any);
    set chapters(value: any);
    static create(data: any): Promise<any>;
    static findById(id: any): Promise<any>;
    static findByAuthor(authorId: any, options?: {}): Promise<any>;
    static findPublished(options?: {}): Promise<any>;
    static searchByText(searchText: any, options?: {}): Promise<any>;
    static getStats(authorId: any): Promise<{
        totalCourses: any;
        publishedCourses: any;
        draftCourses: number;
        totalRevenue: any;
        totalSales: any;
        averageRating: number;
        topSellingCourse: any;
    }>;
    publish(): Promise<any>;
    unpublish(): Promise<any>;
    incrementSales(amount?: number, price?: any): Promise<any>;
    updateRating(newRating: any): Promise<any>;
    autoSave(data: any): Promise<any>;
    toJSON(): {
        id: any;
        title: any;
        courseType: any;
        grade: any;
        group: any;
        description: any;
        tags: any;
        isPublished: any;
        isDraft: any;
        questionCount: any;
        totalSales: any;
        revenue: any;
        difficulty: any;
        estimatedTime: any;
        price: any;
        authorId: any;
        averageRating: any;
        ratingCount: any;
        metadata: any;
        createdAt: any;
        updatedAt: any;
    };
}
