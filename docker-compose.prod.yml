version: '3.8'

services:
  # Frontend Service
  frontend:
    build:
      context: .
      target: frontend
      dockerfile: Dockerfile
    container_name: exam-edu-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend:5000/api/v1
    depends_on:
      - backend
    networks:
      - exam-edu-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Service
  backend:
    build:
      context: .
      target: backend
      dockerfile: Dockerfile
    container_name: exam-edu-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=mongodb://mongo:27017/exam-edu-prod
      - REDIS_URL=redis://redis:6379
    depends_on:
      - mongo
      - redis
    networks:
      - exam-edu-network
    volumes:
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Database
  mongo:
    image: mongo:6.0
    container_name: exam-edu-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=your-mongo-password
      - MONGO_INITDB_DATABASE=exam-edu-prod
    volumes:
      - mongo_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - exam-edu-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: exam-edu-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass your-redis-password
    volumes:
      - redis_data:/data
    networks:
      - exam-edu-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: exam-edu-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - exam-edu-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: exam-edu-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - exam-edu-network

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: exam-edu-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=your-grafana-password
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - exam-edu-network

  # Log Management with ELK Stack (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: exam-edu-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - exam-edu-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: exam-edu-logstash
    restart: unless-stopped
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    depends_on:
      - elasticsearch
    networks:
      - exam-edu-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: exam-edu-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - exam-edu-network

  # Backup Service
  backup:
    image: alpine:latest
    container_name: exam-edu-backup
    restart: unless-stopped
    volumes:
      - mongo_data:/backup/mongo:ro
      - redis_data:/backup/redis:ro
      - ./uploads:/backup/uploads:ro
      - ./backups:/backups
      - ./backup-script.sh:/backup-script.sh:ro
    command: sh -c "chmod +x /backup-script.sh && crond -f"
    depends_on:
      - mongo
      - redis
    networks:
      - exam-edu-network

volumes:
  mongo_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  nginx_logs:

networks:
  exam-edu-network:
    driver: bridge
